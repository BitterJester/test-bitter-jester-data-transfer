AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  JotformApiKey:
    Type: String
    Default: Missing Jotform Key

Resources:
  LambdaBasicAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaBasicAccessRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
  GetJudgingApplications:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetJudgingApplications
      Code: ./
      Handler: "getJudgingApplicationsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 45
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  GetOriginalSongSubmissions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetOriginalSongSubmissions
      Code: ./
      Handler: "getOriginalSongSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  UpdateOriginalSongWeeklySchedule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateOriginalSongWeeklySchedule
      Code: ./
      Handler: "updateOriginalSongWeeklyScheduleLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CalculateScoresForEachOriginalSongInWeek
      Code: ./
      Handler: "calculateScoresForEachOriginalSongInWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Topics:
        - Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
  CalculateScoresForEachOriginalSongInWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      FunctionName: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
  CalculateScoresForEachOriginalSongInWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
          Protocol: "lambda"
  AggregateCommentsForWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AggregateCommentsForWeek
      Code: ./
      Handler: "aggregateCommentsForWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 16
  AggregateCommentsForWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: AggregateCommentsForWeekSnsTopic
      Topics:
        - Ref: AggregateCommentsForWeekSnsTopic
  AggregateCommentsForWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: AggregateCommentsForWeekSnsTopic
      FunctionName: !GetAtt AggregateCommentsForWeek.Arn
  AggregateCommentsForWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AggregateCommentsForWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt AggregateCommentsForWeek.Arn
          Protocol: "lambda"