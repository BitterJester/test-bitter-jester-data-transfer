AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  JotformApiKey:
    Type: String
    Default: Missing Jotform Key

Resources:
  LambdaBasicAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaBasicAccessRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
  WriteToS3FromJotForm:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WriteToS3FromJotForm
      Code:
          S3Bucket: "bitter-jester-test"
          S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getCompletedSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 30
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  BandApplicationsUpdatedSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BandApplicationUpdatedSnsTopic
      Subscription:
        - Endpoint: !GetAtt GenerateFridayNightBattleSchedule.Arn
          Protocol: "lambda"
  SNSAccessPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: BandApplicationsUpdatedSnsTopic
      Topics:
        - Ref: BandApplicationsUpdatedSnsTopic
  CheckJotFormForUpdatesPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: CheckJotFormForUpdatesSnsTopic
      Topics:
        - Ref: CheckJotFormForUpdatesSnsTopic
  GenerateFridayNightBattleScheduleLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: BandApplicationsUpdatedSnsTopic
      FunctionName: !GetAtt GenerateFridayNightBattleSchedule.Arn
  CheckJotFormForUpdatesSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CheckJotFormForUpdatesSnsTopic
      Subscription:
        - Endpoint: !GetAtt WriteToS3FromJotForm.Arn
          Protocol: "lambda"
  CheckJotFormForUpdatesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: CheckJotFormForUpdatesSnsTopic
      FunctionName: !GetAtt WriteToS3FromJotForm.Arn
  GenerateFridayNightBattleSchedule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenerateFridayNightBattleSchedule
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "generateFridayNightBattleScheduleLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  RenameFilesFromCompletedSubmissions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RenameFilesFromCompletedSubmissions
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "renameFilesFromCompletedSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 300
      MemorySize: 2048
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  GetIncompleteApplicationsFromJotForm:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetIncompleteApplicationsFromJotForm
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getIncompleteApplicationsFromJotFormLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  IncompleteApplicationsFromJotFormSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: IncompleteApplicationsFromJotFormSnsTopic
      Topics:
        - Ref: IncompleteApplicationsFromJotFormSnsTopic
  IncompleteApplicationsFromJotFormLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: IncompleteApplicationsFromJotFormSnsTopic
      FunctionName: !GetAtt GetIncompleteApplicationsFromJotForm.Arn
  IncompleteApplicationsFromJotFormSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: IncompleteApplicationsFromJotFormSnsTopic
      Subscription:
        - Endpoint: !GetAtt GetIncompleteApplicationsFromJotForm.Arn
          Protocol: "lambda"
  GetOriginalSongSubmissions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetOriginalSongSubmissions
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getOriginalSongSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  UpdateOriginalSongWeeklySchedule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateOriginalSongWeeklySchedule
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "updateOriginalSongWeeklyScheduleLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CalculateScoresForEachOriginalSongInWeek
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "calculateScoresForEachOriginalSongInWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Topics:
        - Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
  CalculateScoresForEachOriginalSongInWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      FunctionName: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
  CalculateScoresForEachOriginalSongInWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
          Protocol: "lambda"
  AggregateCommentsForWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AggregateCommentsForWeek
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "aggregateCommentsForWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 16
  AggregateCommentsForWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: AggregateCommentsForWeekSnsTopic
      Topics:
        - Ref: AggregateCommentsForWeekSnsTopic
  AggregateCommentsForWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: AggregateCommentsForWeekSnsTopic
      FunctionName: !GetAtt AggregateCommentsForWeek.Arn
  AggregateCommentsForWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AggregateCommentsForWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt AggregateCommentsForWeek.Arn
          Protocol: "lambda"
  BitterJesterDataManagerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: API for Bitter Jester Data Manager
      Name: bitter-jester-data-manager-api
  CompetitionIdPathResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BitterJesterDataManagerApi.RootResourceId
      PathPart: '{competitionId}'
      RestApiId: !Ref BitterJesterDataManagerApi
  UpdateCompetitionScheduleResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: CompetitionIdPathResource
      PathPart: 'update-schedule'
      RestApiId: !Ref BitterJesterDataManagerApi
  CompletedSubmissionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: CompetitionIdPathResource
      PathPart: 'completed-submissions'
      RestApiId: !Ref BitterJesterDataManagerApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref BitterJesterDataManagerApi
      Schema: { }
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: UpdateCompetitionScheduleGatewayMethod
    Properties:
      Description: Bitter Jester Data Manager API Deployment
      RestApiId: !Ref BitterJesterDataManagerApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Prod API Stage
      RestApiId: !Ref BitterJesterDataManagerApi
      StageName: prod
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  ApiGatewayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "LambdaAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Action: 'lambda:*'
            Resource: !GetAtt GenerateFridayNightBattleSchedule.Arn
          - Effect: 'Allow'
            Action: 'lambda:*'
            Resource: !GetAtt WriteToS3FromJotForm.Arn
      Roles:
        - !Ref ApiGatewayIamRole
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GenerateFridayNightBattleSchedule.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BitterJesterDataManagerApi}/*/*
  LambdaApiGatewayInvokeCompletedSubmissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "WriteToS3FromJotForm.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BitterJesterDataManagerApi}/*/*
  UpdateCompetitionScheduleGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.path.competitionId: true
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates: { "application/json": "" }
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{ \"competitionId\": \"$input.params('competitionId')\"}"
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "GenerateFridayNightBattleSchedule.Arn"
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      OperationName: 'update competition schedule'
      ResourceId: !Ref UpdateCompetitionScheduleResource
      RestApiId: !Ref BitterJesterDataManagerApi
  WriteToS3FromJotFormGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.path.competitionId: true
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates: { "application/json": "" }
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{ \"competitionId\": \"$input.params('competitionId')\"}"
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "WriteToS3FromJotForm.Arn"
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      OperationName: 'get updated completed submissions'
      ResourceId: !Ref CompletedSubmissionsResource
      RestApiId: !Ref BitterJesterDataManagerApi
Outputs:
  MainEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Update Schedule Function"
    Value: !Sub "https://${BitterJesterDataManagerApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/{competitionId}"
  GetCompletedSubmissionsEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Completed Submissions Function"
    Value: !Sub "https://${BitterJesterDataManagerApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/{competitionId}/completed-submissions"
  UpdateCompetitionScheduleEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Update Schedule Function"
    Value: !Sub "https://${BitterJesterDataManagerApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/{competitionId}/update-schedule"
  UpdateCompetitionScheduleFunction:
    Description: "Update Competition Schedule Function ARN"
    Value: !GetAtt GenerateFridayNightBattleSchedule.Arn
  LambdaBasicAccessRole:
    Description: "IAM Role created for Lambda"
    Value: !GetAtt LambdaBasicAccessRole.Arn
  ApiGatewayIamRole:
    Description: "IAM Role created for API Gateway"
    Value: !GetAtt ApiGatewayIamRole.Arn