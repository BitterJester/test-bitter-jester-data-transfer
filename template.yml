AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AwsAccessID:
    Type: String
    Default: Missing ID
  AwsSecretKey:
    Type: String
    Default: Missing secret Key
  JotformApiKey:
    Type: String
    Default: Missing Jotform Key

Resources:
  LambdaBasicAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaBasicAccessRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
  WriteToS3FromJotForm:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WriteToS3FromJotForm
      Code:
          S3Bucket: "bitter-jester-test"
          S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getCompletedSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 20
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  BandApplicationsUpdatedSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BandApplicationUpdatedSnsTopic
      Subscription:
        - Endpoint: !GetAtt GenerateFridayNightBattleSchedule.Arn
          Protocol: "lambda"
  SNSAccessPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: BandApplicationsUpdatedSnsTopic
      Topics:
        - Ref: BandApplicationsUpdatedSnsTopic
  CheckJotFormForUpdatesPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: CheckJotFormForUpdatesSnsTopic
      Topics:
        - Ref: CheckJotFormForUpdatesSnsTopic
  GenerateFridayNightBattleScheduleLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: BandApplicationsUpdatedSnsTopic
      FunctionName: !GetAtt GenerateFridayNightBattleSchedule.Arn
  CheckJotFormForUpdatesSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CheckJotFormForUpdatesSnsTopic
      Subscription:
        - Endpoint: !GetAtt WriteToS3FromJotForm.Arn
          Protocol: "lambda"
  CheckJotFormForUpdatesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: CheckJotFormForUpdatesSnsTopic
      FunctionName: !GetAtt WriteToS3FromJotForm.Arn
  GenerateFridayNightBattleSchedule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenerateFridayNightBattleSchedule
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "generateFridayNightBattleScheduleLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          AWS_ACCESS_ID:
            Ref: AwsAccessID
          AWS_SECRET_KEY:
            Ref: AwsSecretKey
  RenameFilesFromCompletedSubmissions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RenameFilesFromCompletedSubmissions
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "renameFilesFromCompletedSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  GetIncompleteApplicationsFromJotForm:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetIncompleteApplicationsFromJotForm
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getIncompleteApplicationsFromJotFormLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  IncompleteApplicationsFromJotFormSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: IncompleteApplicationsFromJotFormSnsTopic
      Topics:
        - Ref: IncompleteApplicationsFromJotFormSnsTopic
  IncompleteApplicationsFromJotFormLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: IncompleteApplicationsFromJotFormSnsTopic
      FunctionName: !GetAtt GetIncompleteApplicationsFromJotForm.Arn
  IncompleteApplicationsFromJotFormSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: IncompleteApplicationsFromJotFormSnsTopic
      Subscription:
        - Endpoint: !GetAtt GetIncompleteApplicationsFromJotForm.Arn
          Protocol: "lambda"
  GetOriginalSongSubmissions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetOriginalSongSubmissions
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "getOriginalSongSubmissionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
      Environment:
        Variables:
          JOTFORM_API_KEY:
            Ref: JotformApiKey
  UpdateOriginalSongWeeklySchedule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateOriginalSongWeeklySchedule
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "updateOriginalSongWeeklyScheduleLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CalculateScoresForEachOriginalSongInWeek
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "calculateScoresForEachOriginalSongInWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 60
  CalculateScoresForEachOriginalSongInWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Topics:
        - Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
  CalculateScoresForEachOriginalSongInWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: CalculateScoresForEachOriginalSongInWeekSnsTopic
      FunctionName: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
  CalculateScoresForEachOriginalSongInWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CalculateScoresForEachOriginalSongInWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt CalculateScoresForEachOriginalSongInWeek.Arn
          Protocol: "lambda"
  AggregateCommentsForWeek:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AggregateCommentsForWeek
      Code:
        S3Bucket: "bitter-jester-test"
        S3Key: "bitter-jester-data-transfer/test-bitter-jester-data-transfer.zip"
      Handler: "aggregateCommentsForWeekLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !GetAtt LambdaBasicAccessRole.Arn
      Timeout: 16
  AggregateCommentsForWeekSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Principal:
              AWS: "*"
            Resource:
              Ref: AggregateCommentsForWeekSnsTopic
      Topics:
        - Ref: AggregateCommentsForWeekSnsTopic
  AggregateCommentsForWeekLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: AggregateCommentsForWeekSnsTopic
      FunctionName: !GetAtt AggregateCommentsForWeek.Arn
  AggregateCommentsForWeekSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AggregateCommentsForWeekSnsTopic
      Subscription:
        - Endpoint: !GetAtt AggregateCommentsForWeek.Arn
          Protocol: "lambda"